You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes 
contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Answer-

class ListNode:
    def __init__(self, val, next_node=None, prev_node=None):
        self.val = val
        self.next = next_node
 class Solution:
     def addtwonumbers(self,l1: ListNode, l2: ListNode) -> ListNode:
         Result = ListNode()
         CurrentPointer = Result
         Carry = 0
         while l1 or l2:
             v1=l1.val if l1 else 0
             v2=l2.val if l2 else 0
             
             val=v1+v2+carry
             carry = val // 10
             val = val % 10
             CurrentPointer.next = ListNode(val)
             
             CurrentPointer = CurrentPointer.next()
             l1 = l1.next if l1 else None
             l2 = l2.next if l2 else None
        return result.next
